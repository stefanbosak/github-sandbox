name: 'Prepare multi-platform Docker images'
run-name: '${{ github.ref_type }}_${{ github.ref_name }}@${{ github.triggering_actor }}'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  schedule:
    - cron: "45 22 * * *"
  workflow_dispatch:
    inputs:
      RUNNER_CLI_VERSION:
        description: 'RUNNER_CLI_VERSION (2.324.0)'
        required: false
        type: string
      CONTAINER_TAG:
        description: 'CONTAINER_TAG (initial)'
        required: false
        type: string
      SKIP_VERSION_CHANGE:
        description: 'SKIP_VERSION_CHANGE (false)'
        required: false
        type: boolean
        default: false

env:
  GH_REGISTRY: ghcr.io
  DH_REGISTRY: docker.io

jobs:
  docker-build-test-tag-push:
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        runner: [ubuntu-latest]
    permissions:
      contents: write
      packages: write
    steps:
      - name: 'Checkout'
        uses: actions/checkout@main
      - name: 'Set requested tools versions to GITHUB_ENV'
        shell: bash
        run: |
          export DH_USER="${{ secrets.DH_USER }}"; export DH_TOKEN="${{ secrets.DH_TOKEN }}"; export GH_PERSONAL_TOKEN="${{ secrets.GH_TOKEN }}"; export GH_TOKEN_ORG="${{ secrets.GH_TOKEN_ORG }}"; ./setvariables.sh
          echo "CONTAINER_TAG=initial" >> ${GITHUB_ENV}
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            if [[ "${{ github.event.inputs.RUNNER_CLI_VERSION }}" != "" ]]; then
              sed -i "s/RUNNER_CLI_VERSION=.*/RUNNER_CLI_VERSION=${{ github.event.inputs.RUNNER_CLI_VERSION }}/g" /tmp/github_env_tail
            fi
            if [[ "${{ github.event.inputs.CONTAINER_TAG }}" != "" ]]; then
              sed -i "s/CONTAINER_TAG=.*/CONTAINER_TAG=${{ github.event.inputs.CONTAINER_TAG }}/g" >> ${GITHUB_ENV}
            fi
          fi
          if [[ "${{ github.event.inputs.SKIP_VERSION_CHANGE }}" == "false" ]]; then
            export DH_USER="${{ secrets.DH_USER }}"; export DH_TOKEN="${{ secrets.DH_TOKEN }}"; export GH_PERSONAL_TOKEN="${{ secrets.GH_TOKEN }}"; export GH_TOKEN_ORG="${{ secrets.GH_TOKEN_ORG }}"; ./setvariables.sh
          fi
          cat /tmp/github_env_tail >> ${GITHUB_ENV}
          echo "WORKSPACE_ROOT_DIR=/home/user" >> ${GITHUB_ENV}
          echo "REPOSITORY_NAME=${GITHUB_REPOSITORY#$GITHUB_REPOSITORY_OWNER/}" >> ${GITHUB_ENV}
          echo "/tmp/github_env_tail:"
          cat /tmp/github_env_tail
          echo "GITHUB_ENV:"
          cat ${GITHUB_ENV}
      - name: 'Set up QEMU (arm64)'
        if: ${{ env.CLI_VERSIONS_CHANGED == '1' || github.event.inputs.SKIP_VERSION_CHANGE == 'true' }}
        uses: docker/setup-qemu-action@master
        with:
          platforms: linux/arm64
      - name: 'Set up Docker buildx'
        if: ${{ env.CLI_VERSIONS_CHANGED == '1' || github.event.inputs.SKIP_VERSION_CHANGE == 'true' }}
        uses: docker/setup-buildx-action@master
        with:
          version: latest
          driver-opts: |
            network=host
            image=moby/buildkit:master
      - name: 'Login to GitHub Container Registry'
        if: ${{ env.CLI_VERSIONS_CHANGED == '1' || github.event.inputs.SKIP_VERSION_CHANGE == 'true' }}
        uses: docker/login-action@master
        with:
          registry: ${{ env.GH_REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GH_TOKEN }}
          ecr: false
          logout: true
      - name: 'Login to DockerHub Container Registry'
        if: ${{ env.CLI_VERSIONS_CHANGED == '1' || github.event.inputs.SKIP_VERSION_CHANGE == 'true' }}
        uses: docker/login-action@master
        with:
          registry: ${{ env.DH_REGISTRY }}
          username: ${{ secrets.DH_USER }}
          password: ${{ secrets.DH_TOKEN }}
          ecr: false
          logout: true
      - name: 'Clean old containers'
        if: ${{ env.CLI_VERSIONS_CHANGED == '1' || github.event.inputs.SKIP_VERSION_CHANGE == 'true' }}
        uses: actions/delete-package-versions@main
        with:
          owner: ${{ github.repository_owner }}
          package-name: ${{ env.REPOSITORY_NAME }}
          package-type: 'container'
          token: ${{ secrets.GH_TOKEN }}
          min-versions-to-keep: 3
      - name: 'Build multi-platforms Docker images'
        if: ${{ env.CLI_VERSIONS_CHANGED == '1' || github.event.inputs.SKIP_VERSION_CHANGE == 'true' }}
        uses: docker/build-push-action@master
        with:
          context: .
          file: ./Dockerfile
          build-args: |
            RUNNER_CLI_VERSION=${{ env.RUNNER_CLI_VERSION }}
            WORKSPACE_ROOT_DIR=${{ env.WORKSPACE_ROOT_DIR }}
          load: false
          provenance: false
          no-cache: false
          platforms: linux/amd64,linux/arm64
      - name: 'Tag and push multi-platforms Docker images to preconfigured container registries'
        if: ${{ env.CLI_VERSIONS_CHANGED == '1' || github.event.inputs.SKIP_VERSION_CHANGE == 'true' }}
        uses: docker/build-push-action@master
        with:
          context: .
          file: ./Dockerfile
          build-args: |
            RUNNER_CLI_VERSION=${{ env.RUNNER_CLI_VERSION }}
            WORKSPACE_ROOT_DIR=${{ env.WORKSPACE_ROOT_DIR }}
          push: true
          provenance: false
          no-cache: false
          github-token: ${{ secrets.GH_TOKEN }}
          secrets: |
            GIT_AUTH_TOKEN=${{ secrets.GH_TOKEN }}
          tags: |
            ${{ secrets.DH_USER }}/${{ env.REPOSITORY_NAME }}:${{ env.CONTAINER_TAG }}
            ${{ env.GH_REGISTRY }}/${{ github.repository_owner }}/${{ env.REPOSITORY_NAME }}:${{ env.CONTAINER_TAG }}
          platforms: linux/amd64,linux/arm64
      - name: 'Pull git'
        if: ${{ env.CLI_VERSIONS_CHANGED == '1' }}
        run: |
          git pull --rebase
      - name: 'Push git changes'
        if: ${{ env.CLI_VERSIONS_CHANGED == '1' }}
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GH_TOKEN }}
